#!/bin/bash
###
# Nuxeo PostgreSQL monitoring script

DB_NAME=${DB_NAME:-nuxeo}
PG_LOG=${PG_LOG:-/var/log/postgresql/postgresql-9.1-main.log}
SUMMARY=${SUMMARY:-`which summary`}
LOG_DIR=${LOG_DIR:-/tmp/pgmon-log}

### END OF CONF

die() {
  echo "ERROR: $*"
  exit 1
}

if [ $(whoami) != "postgres" ]; then
    die "This script must be run as postgres user."
fi


mkdir -p $LOG_DIR || exit 1


PID="$LOG_DIR/pgmon.pid"


help() {
    cat <<EOF
pgmon.sh
==============

PostgreSQL / Nuxeo monitoring

This scipts captures system activities and logs.


Usage
======
   
    pgmon.sh (start|stop|status|archive [TAG])

Options
--------

start
    Remove old monitoring logs and start monitoring.

stop
    Stop monitoring and create a tgz file with all the log files.

status
    Is the monitoring running or not.

Requirement
============

packages: 
  sysstat sysstat atop logtail postgresql-client postgresql-contrib
  with pg_stat_statement, pg_buffercache extension
EOF
}



### 
# Systat sar
SAR=`which sar`
[ -z $SAR ] && die "You need to install sysstat sar package."
SAR_DATA=$LOG_DIR/sysstat-sar-bin.log
SAR_LOG=$LOG_DIR/sysstat-sar.log
SAR_PID=$LOG_DIR/sysstat-sar.pid
# default is 2h monitoring (5sx1440)
SAR_INTERVAL=5
SAR_COUNT=1440

### 
# atop
ATOP_DATA=$LOG_DIR/atop.raw
ATOP_PID=$LOG_DIR/atop.pid
# default is 2h monitoring (5sx1440)
ATOP_INTERVAL=5
ATOP_COUNT=1440

###
# summary



###
# PostgreSQL and logtail
LOGTAIL=`which logtail`
if [ -z $LOGTAIL ]; then
    if [ -e /usr/sbin/logtail ]; then
        LOGTAIL='/usr/sbin/logtail'
    else
        echo "No logtail package, won't monitor PostgreSQL log."
    fi
fi
if [ ! -z $LOGTAIL ]; then
    if [ ! -z $PG_LOG ]; then
        if [ -r $PG_LOG ]; then
            pglog=true
            PG_LOG_OFFSET=$LOG_DIR/pgsql.offset
            PG_MON_LOG=$LOG_DIR/pgsql.log
        fi 
    fi
fi


moncheckalive() {
    if [ ! -r "$SAR_PID" ]; then
    # we don't mind if sar has terminated
        return 1
    else
        return 0
    fi
}

log_misc() {
    file=$1
    echo "## Misc system info `date --rfc-3339=second`" > $file
    uname -a >> $file
    echo "## os" >> $file
    lsb_release -a >> $file 2> /dev/null 
    echo "## CPUs list" >> $file
    cat /proc/cpuinfo  | grep "model name" >> $file
    echo "## CPU speed" >> $file
    dmesg | grep -i bogomips >> $file 
    echo "## uptime" >> $file
    uptime >> $file
    echo "## free -m" >> $file
    free -m >> $file
    echo "## mount" >> $file
    mount >> $file
    echo "## df" >> $file
    df -h >> $file
}

log_summary() {
    file=$1
    [ -z $SUMMARY ] && return 0
    $SUMMARY > $file
}

log_pgstat_reset() {
    psql $DB_NAME <<EOF &> /dev/null
SELECT pg_stat_statements_reset();
\q
EOF

}

log_pgstat_collect() {
    file=$1
    psql $DB_NAME <<EOF &> /dev/null
    \o $file
SELECT count(1) AS uniq_queries, round(sum(total_time)*1000)/1000 AS sum_total_time, sum(calls) AS sum_calls FROM pg_stat_statements;
SELECT round(total_time*1000)/1000 AS total_time, calls, round(total_time/calls*1000)/1000 AS avg, query FROM pg_stat_statements ORDER BY total_time DESC LIMIT 50;
SELECT round(total_time*1000)/1000 AS total_time, calls, round(total_time/calls*1000)/1000 AS avg, query FROM pg_stat_statements ORDER BY calls DESC LIMIT 50;
\o
\q
EOF
}

log_pgstat() {
    file=$1
    psql $DB_NAME <<EOF &> /dev/null
    \o $file
SELECT now(), Version();
SELECT current_database() AS db_name,  pg_size_pretty(pg_database_size(current_database())) AS db_size, pg_size_pretty(SUM(pg_relation_size(indexrelid))::int8) AS index_size FROM pg_index;
SELECT COUNT(*) AS documents_count FROM hierarchy WHERE NOT isproperty;
SELECT primarytype, COUNT(*) AS count FROM hierarchy WHERE NOT isproperty GROUP BY primarytype ORDER BY count DESC;
SELECT COUNT(*) AS hierarchy_count FROM hierarchy;
SELECT COUNT(*) AS aces_count FROM acls;
SELECT COUNT(DISTINCT(id)) AS acls_count FROM acls;
SELECT COUNT(*) AS read_acls_count FROM read_acls;
SELECT (SELECT COUNT(*) FROM users) AS users, (SELECT COUNT(*) FROM user2group) AS user2groups,
    (SELECT COUNT(*) FROM groups) AS group,  (SELECT COUNT(*) FROM group2group) AS group2group;
SELECT stat.relname AS "Table",
    pg_size_pretty(pg_total_relation_size(stat.relid)) AS "Total size",
    pg_size_pretty(pg_relation_size(stat.relid)) AS "Table size",
    CASE WHEN cl.reltoastrelid = 0 THEN 'None' ELSE
        pg_size_pretty(pg_relation_size(cl.reltoastrelid)+
        COALESCE((SELECT SUM(pg_relation_size(indexrelid)) FROM pg_index WHERE indrelid=cl.reltoastrelid)::int8, 0)) END AS "TOAST table size",
    pg_size_pretty(COALESCE((SELECT SUM(pg_relation_size(indexrelid)) FROM pg_index WHERE indrelid=stat.relid)::int8, 0)) AS "Index size",
    CASE WHEN pg_relation_size(stat.relid) = 0 THEN 0.0 ELSE
    round(100 * COALESCE((SELECT SUM(pg_relation_size(indexrelid)) FROM pg_index WHERE indrelid=stat.relid)::int8, 0) /  pg_relation_size(stat.relid)) / 100 END AS "Index ratio"
FROM pg_stat_all_tables stat
  JOIN pg_statio_all_tables statio ON stat.relid = statio.relid
  JOIN pg_class cl ON cl.oid=stat.relid AND stat.schemaname='public'
ORDER BY pg_total_relation_size(stat.relid) DESC
LIMIT 20;
SELECT nspname,relname,
    round(100 * pg_relation_size(indexrelid) / pg_relation_size(indrelid)) / 100 AS index_ratio, pg_size_pretty(pg_relation_size(indexrelid)) AS index_size, pg_size_pretty(pg_relation_size(indrelid)) AS table_size
FROM pg_index I
LEFT JOIN pg_class C ON (C.oid = I.indexrelid)
LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace)
WHERE
  nspname NOT IN ('pg_catalog', 'information_schema', 'pg_toast') AND C.relkind='i' AND pg_relation_size(indrelid) > 0  
ORDER BY pg_relation_size(indexrelid) DESC LIMIT 15;
SELECT relname, idx_tup_fetch + seq_tup_read AS total_reads
FROM pg_stat_all_tables WHERE idx_tup_fetch + seq_tup_read != 0
ORDER BY total_reads desc LIMIT 15;
SELECT
  sum(heap_blks_read) as heap_read,
  sum(heap_blks_hit)  as heap_hit,
  (sum(heap_blks_hit) - sum(heap_blks_read)) / sum(heap_blks_hit) as ratio
FROM
  pg_statio_user_tables;
SELECT
  relname,
  100 * idx_scan / (seq_scan + idx_scan) percent_of_times_index_used,
  n_live_tup rows_in_table
FROM
  pg_stat_user_tables
ORDER BY
  n_live_tup DESC LIMIT 50;
SELECT
  sum(idx_blks_read) as idx_read,
  sum(idx_blks_hit)  as idx_hit,
  (sum(idx_blks_hit) - sum(idx_blks_read)) / sum(idx_blks_hit) as ratio
FROM
  pg_statio_user_indexes;
\di+
SELECT sum(generate_series) AS "speedTest" FROM generate_series(1,1000000);
EXPLAIN ANALYZE SELECT sum(generate_series) AS "speedTest" FROM generate_series(1,1000000);
SELECT now() - query_start AS duration, current_query FROM pg_stat_activity
  WHERE current_query != '<IDLE>' ORDER BY duration DESC;
SELECT database, gid FROM pg_prepared_xacts;
SELECT pg_size_pretty(COUNT(*) * 8192) as buffered FROM  pg_buffercache;
SELECT c.relname, pg_size_pretty(count(*) * 8192) as buffered, round(100.0 * count(*) /
(SELECT setting FROM pg_settings
WHERE name='shared_buffers')::integer,1)
AS buffers_percent,
round(100.0 * count(*) * 8192 /
coalesce(pg_relation_size(c.oid),1), 1)
AS percent_of_relation
FROM pg_class c
INNER JOIN pg_buffercache b
ON b.relfilenode = c.relfilenode
INNER JOIN pg_database d
ON (b.reldatabase = d.oid AND d.datname = current_database())
WHERE pg_relation_size(c.oid) != 0
GROUP BY c.oid,c.relname
ORDER BY 3 DESC
LIMIT 20;
SELECT name, unit, current_setting(name), source FROM pg_settings WHERE source!='default';
SHOW ALL;
\q
EOF
}


start() {
    # start sar
    if moncheckalive; then
        die "Monitoring is already running with pid `cat $SAR_PID`"
    fi
    echo "Starting monitoring `date --rfc-3339=second` ..."
    [ -r "$SAR_DATA" ] && rm -f $SAR_DATA
    [ -r "$SAR_LOG" ] && rm -f $SAR_LOG
    $SAR -d -o $SAR_DATA $SAR_INTERVAL $SAR_COUNT >/dev/null 2>&1 &
    echo $! > $SAR_PID

    [ -r "$ATOP_DATA" ] && rm -f $ATOP_DATA
    atop -w $ATOP_DATA $ATOP_INTERVAL $ATOP_COUNT >/dev/null 2>&1 &
    echo $! > $ATOP_PID

    # logtail on pg log
    if [ "$pglog" = "true" ]; then
        [ -r $PG_LOG_OFFSET ] && rm -f $PG_LOG_OFFSET
        [ -r $PG_MON_LOG ] && rm -f $PG_MON_LOG
        $LOGTAIL -f $PG_LOG -o $PG_LOG_OFFSET > /dev/null
    fi

    # misc
    rm -f $LOG_DIR/misc-*.txt
    log_misc $LOG_DIR/misc-start.txt
    
    # summary
    rm -f $LOG_DIR/summary.txt
    log_summary $LOG_DIR/summary.txt

    # pg stats
    rm -f $LOG_DIR/pgstat-*.txt
    log_pgstat $LOG_DIR/pgstat-start.txt
    log_pgstat_reset
    echo "[`cat $SAR_PID`] Monitoring started."
}

stop() {
    if moncheckalive; then
        echo "Stopping monitoring `date --rfc-3339=second` ..."
        kill -9 `cat "$SAR_PID"`
        sleep 1
        rm -f $SAR_PID
        kill -9 `cat "$ATOP_PID"`
        sleep 1
        rm -f $ATOP_PID
	
        if [ "$pglog" = "true" ]; then
            $LOGTAIL -f $PG_LOG -o $PG_LOG_OFFSET > $PG_MON_LOG
            rm -f $PG_LOG_OFFSET
        fi
        # Convert sar log into text
        LC_ALL=C sar -Ap -f $SAR_DATA > $SAR_LOG
        [ $? ] && rm -f $SAR_DATA
        log_misc $LOG_DIR/misc-end.txt
	log_pgstat_collect $LOG_DIR/pgstat-statements.txt
        log_pgstat $LOG_DIR/pgstat-end.txt

        echo "Monitoring stopped."
        archive
        return 0
    else
        echo "Monitoring is not running."
    fi
}

status() {
    if moncheckalive; then
        echo "Monitoring is running with pid `cat $SAR_PID`"
    else
        echo "Monitoring is not running."
    fi
}

archive() {
    echo "Archiving log ..."
    if [ ! -z "$1" ]; then
        TAG=$1 
    else
        TAG=`date -u '+%Y%m%d-%H%M%S'`
    fi
    ARCH_FILE=$LOG_DIR/log-$TAG.tgz
    logdir=`basename $LOG_DIR`
    (cd `dirname $LOG_DIR`; tar czf $ARCH_FILE $logdir/*.txt $logdir/*.log $logdir/*.raw)
    echo "Done: $ARCH_FILE"
}

case "$1" in
    status)
        status
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    status)
        status
        ;;
    archive)
        shift
        archive $@
        ;;
    help)
        help
        ;;
    *)
        echo "Usage: monitorctl.sh (start|stop|status|archive [TAG]|help)"
        ;;
esac
